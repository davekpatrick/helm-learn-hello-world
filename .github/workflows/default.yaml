name: default
run-name: Continuous Integration
on:
  push:
#    branches-ignore:    
#      - main
  pull_request:
jobs:
  # --------------------------------------------
  build:
    name: Artifact build
    strategy:
      matrix:
        operatingSystem: [ubuntu-24.04]
      fail-fast: false
    runs-on: ${{ matrix.operatingSystem }}
    # 
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - uses: azure/setup-helm@v4
      with:
        version: 'latest'
    - name: Locate updated Files
      id: updated-files
      env:
        DEBUG: ${{ runner.debug == '1' && 'true' || 'false' }}
      run: |
        cd helm 
        # Get the list of files that have changed
        updatedFilesList=$( git diff-tree --relative --no-commit-id --name-only -r ${{ github.sha }} )
        if [ -z "$updatedFilesList" ]; then
          updatedFilesNum=0
          echo "No files have changed"
          echo "::notice file=${chart}::No helm charts have been updated"
          exit 0
        else
          updatedFilesNum=$( echo "$updatedFilesList" | wc -l )
          echo "Number of updated Files: $updatedFilesNum"
          # Debug output
          if [ "${DEBUG}" = "true" ]; then
              echo "Updated Files List"
              echo "--------------------------"
              echo "$updatedFilesList"
              echo "--------------------------"
          fi
          # Set the output variables
          echo "UPDATED_FILES_COUNT=$( echo $updatedFilesNum )" >> "$GITHUB_OUTPUT"
          echo "UPDATED_FILES_LIST=$( echo $updatedFilesList )" >> "$GITHUB_OUTPUT"
        fi
    - name: Locate updated charts
      id: updated-charts
      if: steps.updated-files.outputs.UPDATED_FILES_COUNT != 0
      run: |
        cd helm 
          # Get the list of files that have changed
          updatedFilesList=$( echo ${{ steps.helm-updated-files.outputs.UPDATED_FILES_LIST }} | tr " " "\n" )
          if [ "${DEBUG}" = "true" ]; then
            echo $updatedFilesList
          fi
          # a List of updated Chart.yaml files
          if [[ $( echo "${updatedFilesList}" | grep 'Chart.yaml' | sed -e 's/\/Chart.yaml//' ) ]] ; then
              updatedChartsList=$( echo "${updatedFilesList}" | grep 'Chart.yaml' | sed -e 's/\/Chart.yaml//' )
              updatedChartCount=$( echo "${updatedChartsList}" | wc -w | xargs )
              if [ "${DEBUG}" = "true" ]; then
                  echo $updatedChartsList
              fi
          else 
              updatedChartsList=""
              updatedChartCount=0
          fi
          echo "Number of updated Chart.yaml files: ${updatedChartCount}"
          # a list of all updated files that does not include Chart.yaml files
          if [[ $( echo "${updatedFilesList}" | grep -v 'Chart.yaml' ) ]] ; then
              updatedNonChartFiles=$( echo "${updatedFilesList}" | grep -v 'Chart.yaml' )
              updatedNonChartCount=$( echo "${updatedNonChartFiles}" | wc -w | xargs )
              if [ "${DEBUG}" = "true" ]; then
                  echo "${updatedNonChartFiles}"
              fi
          else
              updatedNonChartFiles=""
              updatedNonChartCount=0
          fi
          echo "Number of updated non Chart.yaml files: ${updatedNonChartCount}"
          # setup chart publishing input variables
          publishChartCount=0
          publishChartList=$( echo "${updatedChartsList}" | tr " " "\n" )
          if [[ "${updatedNonChartCount}" -gt 0 ]] ; then
              # ensure if a chart includes 
              updatedDirs=$( echo "${updatedNonChartFiles}" | xargs -n1 dirname | awk -F "/" '{print $1}' | sort -u  )
              echo "Number of updated directories: $( echo $updatedDirs | wc -w | xargs )"
              echo $updatedDirs | tr " " "\n"
              # 
              for chart in $updatedDirs; do
                  echo "Validating the ${chart} helm chart also has an updated Chart.yaml file"
                  testWeAlsoHaveAnUpdatedChartFile=$( echo "${updatedChartsList}" | tr " " "\n" | grep -e "^${chart}$" )
                  if [ "${DEBUG}" = "true" ]; then
                      echo "testWeAlsoHaveAnUpdatedChartFile:[${testWeAlsoHaveAnUpdatedChartFile}]"
                  fi
                  if [ -z "${testWeAlsoHaveAnUpdatedChartFile}" ]; then
                      echo "ERROR: The ${chart} helm chart template has been updated but the Chart.yaml file has not been"
                      echo "::error file=${chart}::The helm chart template has been updated but the Chart.yaml file has not been"
                      # 
                      publishChartList=$( echo "${publishChartList}" | grep  -v -e "^${chart}$" )
                  else
                      echo "The ${chart} helm chart and version has been updated"
                      publishChartCount=$( expr $publishChartCount + 1 )
                  fi
              done
          else
              echo "WARN: Only Chart.yaml files has been updated"
              echo "::warning file=::Only Chart.yaml files has been updated"
          fi
          # Set the output variables
          echo "UPDATED_CHARTS_COUNT=${publishChartCount}" >> "$GITHUB_OUTPUT"
          echo "UPDATED_CHARTS_LIST=${publishChartList}" >> "$GITHUB_OUTPUT"
    - name: Helm Chart Publishing
      if: steps.updated-charts.outputs.UPDATED_CHARTS_COUNT != 0
      run: |
        cd helm 
        # List of charts that have changed
        echo ${{ steps.updated-charts.outputs.UPDATED_CHARTS_LIST }}
        # Lint all charts
        for chart in ${{ steps.updated-charts.outputs.UPDATED_CHARTS_LIST }}; do
          echo "chart:[${chart}]"
          # 
          helm show chart ${chart} | grep -E "^version:" | awk '{print $2}'
          helm lint ${chart}
          rc=$?
          if [ $rc -ne 0 ]; then
            echo "ERROR: Helm lint failed for ${chart}"
            echo "::error file=${chart}::Helm lint failed for ${chart}"
            exit 1
          else
            echo "Helm lint passed for ${chart}"
            echo "::notice file=${chart}::Helm lint passed for ${chart}"
          fi
        done