name: default
run-name: Continuous Integration
on:
  push:
#    branches-ignore:    
#      - main
  pull_request:
jobs:
  # --------------------------------------------
  build:
    name: Artifact build
    strategy:
      matrix:
        operatingSystem: [ubuntu-24.04]
      fail-fast: false
    runs-on: ${{ matrix.operatingSystem }}
    # 
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - uses: azure/setup-helm@v4
      with:
        version: 'latest'
    - name: Locate updated Files
      id: updated-files
      env:
        DEBUG: ${{ runner.debug == '1' && 'true' || 'false' }}
      run: |
        cd helm 
        # Get the list of files that have changed
        updatedFilesList=$( git diff-tree --relative --no-commit-id --name-only -r ${{ github.sha }} )
        if [ -z "$updatedFilesList" ]; then
          updatedFilesNum=0
          echo "No files have changed"
          exit 0
        else
          updatedFilesNum=$( echo "$updatedFilesList" | wc -l )
          echo "Number of updated Files: $updatedFilesNum"
          # Debug output
          if [ "${DEBUG}" = "true" ]; then
              echo "Updated Files List"
              echo "--------------------------"
              echo "$updatedFilesList"
              echo "--------------------------"
          fi
          # Set the output variables
          echo "UPDATED_FILES_COUNT=$( echo $updatedFilesNum )" >> "$GITHUB_OUTPUT"
          echo "UPDATED_FILES_LIST=$( echo $updatedFilesList )" >> "$GITHUB_OUTPUT"
        fi
    - name: Locate updated charts
      id: updated-charts
      if: steps.updated-files.outputs.UPDATED_FILES_COUNT != 0
      run: |
        cd helm 
        # Get the list of files that have changed
        updatedFilesList=$( echo ${{ steps.updated-files.outputs.UPDATED_FILES_LIST }} | tr " " "\n" )
        echo $updatedFilesList
        #
        updatedChartsList=$( echo "${updatedFilesList}" | grep 'Chart.yaml' | sed -e 's/\/Chart.yaml//' )
        updatedChartCount=$( echo ${updatedChartsList} | wc -w )
        echo "Number of updated charts: $( echo $updatedChartsList | wc -w )"
        echo $updatedChartsList
        #
        updatedNonChartFiles=$( echo "${updatedFilesList}" | grep -v 'Chart.yaml' )
        echo "Number of updated non Chart.yaml files: $( echo $updatedNonChartFiles | wc -w )"
        echo $updatedNonChartFiles
        #
        updatedDirs=$( echo "${updatedFilesList}" | grep -v 'Chart.yaml' | xargs -n1 dirname | grep -v 'Chart.yaml' | xargs -n1 dirname | awk -F "/" '{print $1}' | sort -u  )
        echo "Number of updated directories: $( echo $updatedDirs | wc -w )"
        echo $updatedDirs
        
        # 
        for chart in $updatedDirs; do
          echo "Checking if the ${chart} helm chart has been updated"
          testWeAlsoHaveAnUpdatedChartFile=$( echo "${updatedChartsList}" | tr " " "\n" | grep "^${chart}$" )
          if [ -n "${testWeAlsoHaveAnUpdatedChartFile}" ]; then
            echo "WARN: The ${chart} helm chart template has been updated but the Chart.yaml file has not been"
          else
            echo "The ${chart} helm chart and version has been updated"
          fi
        done
        # Set the output variables
        echo "UPDATED_CHARTS_COUNT=$( echo $updatedChartCount | wc -w )" >> "$GITHUB_OUTPUT"
        echo "UPDATED_CHARTS_LIST=$( echo $updatedChartsList )" >> "$GITHUB_OUTPUT"
    - name: Helm Chart
      if: steps.updated-charts.outputs.UPDATED_CHARTS_COUNT != 0
      run: |
        cd helm 
        # List of charts that have changed
        echo ${{ steps.updated-charts.outputs.UPDATED_CHARTS_LIST }}
        # Lint all charts
        for chart in ${{ steps.updated-charts.outputs.UPDATED_CHARTS_LIST }}; do
          echo "chart:[${chart}]"
          # 
          helm show chart ${chart} | grep -E "^version:" | awk '{print $2}'
          helm lint ${chart}
        done